package com.liferay.krrishna.sb.remote.model.impl;

import com.liferay.krrishna.sb.remote.model.MyCustomCountry;
import com.liferay.krrishna.sb.remote.model.MyCustomCountryModel;
import com.liferay.krrishna.sb.remote.model.MyCustomCountrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MyCustomCountry service. Represents a row in the &quot;country&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.krrishna.sb.remote.model.MyCustomCountryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MyCustomCountryImpl}.
 * </p>
 *
 * @author Liferay
 * @see MyCustomCountryImpl
 * @see com.liferay.krrishna.sb.remote.model.MyCustomCountry
 * @see com.liferay.krrishna.sb.remote.model.MyCustomCountryModel
 * @generated
 */
@JSON(strict = true)
public class MyCustomCountryModelImpl extends BaseModelImpl<MyCustomCountry>
    implements MyCustomCountryModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a my custom country model instance should use the {@link com.liferay.krrishna.sb.remote.model.MyCustomCountry} interface instead.
     */
    public static final String TABLE_NAME = "country";
    public static final Object[][] TABLE_COLUMNS = {
            { "countryId", Types.VARCHAR },
            { "name", Types.VARCHAR },
            { "a2", Types.VARCHAR },
            { "a3", Types.VARCHAR },
            { "number_", Types.VARCHAR },
            { "idd_", Types.VARCHAR },
            { "zipRequired", Types.INTEGER },
            { "active_", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table country (countryId VARCHAR(75) not null primary key,name VARCHAR(75) null,a2 VARCHAR(75) null,a3 VARCHAR(75) null,number_ VARCHAR(75) null,idd_ VARCHAR(75) null,zipRequired INTEGER,active_ INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table country";
    public static final String ORDER_BY_JPQL = " ORDER BY myCustomCountry.countryId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY country.countryId ASC";
    public static final String DATA_SOURCE = "eportalDB";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.krrishna.sb.remote.model.MyCustomCountry"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.krrishna.sb.remote.model.MyCustomCountry"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.krrishna.sb.remote.model.MyCustomCountry"));
    private static ClassLoader _classLoader = MyCustomCountry.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            MyCustomCountry.class
        };
    private String _countryId;
    private String _name;
    private String _a2;
    private String _a3;
    private String _number_;
    private String _idd_;
    private int _zipRequired;
    private int _active_;
    private MyCustomCountry _escapedModel;

    public MyCustomCountryModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static MyCustomCountry toModel(MyCustomCountrySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        MyCustomCountry model = new MyCustomCountryImpl();

        model.setCountryId(soapModel.getCountryId());
        model.setName(soapModel.getName());
        model.setA2(soapModel.getA2());
        model.setA3(soapModel.getA3());
        model.setNumber_(soapModel.getNumber_());
        model.setIdd_(soapModel.getIdd_());
        model.setZipRequired(soapModel.getZipRequired());
        model.setActive_(soapModel.getActive_());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<MyCustomCountry> toModels(
        MyCustomCountrySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<MyCustomCountry> models = new ArrayList<MyCustomCountry>(soapModels.length);

        for (MyCustomCountrySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _countryId;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setCountryId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _countryId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return MyCustomCountry.class;
    }

    @Override
    public String getModelClassName() {
        return MyCustomCountry.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("countryId", getCountryId());
        attributes.put("name", getName());
        attributes.put("a2", getA2());
        attributes.put("a3", getA3());
        attributes.put("number_", getNumber_());
        attributes.put("idd_", getIdd_());
        attributes.put("zipRequired", getZipRequired());
        attributes.put("active_", getActive_());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String countryId = (String) attributes.get("countryId");

        if (countryId != null) {
            setCountryId(countryId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String a2 = (String) attributes.get("a2");

        if (a2 != null) {
            setA2(a2);
        }

        String a3 = (String) attributes.get("a3");

        if (a3 != null) {
            setA3(a3);
        }

        String number_ = (String) attributes.get("number_");

        if (number_ != null) {
            setNumber_(number_);
        }

        String idd_ = (String) attributes.get("idd_");

        if (idd_ != null) {
            setIdd_(idd_);
        }

        Integer zipRequired = (Integer) attributes.get("zipRequired");

        if (zipRequired != null) {
            setZipRequired(zipRequired);
        }

        Integer active_ = (Integer) attributes.get("active_");

        if (active_ != null) {
            setActive_(active_);
        }
    }

    @JSON
    @Override
    public String getCountryId() {
        if (_countryId == null) {
            return StringPool.BLANK;
        } else {
            return _countryId;
        }
    }

    @Override
    public void setCountryId(String countryId) {
        _countryId = countryId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getA2() {
        if (_a2 == null) {
            return StringPool.BLANK;
        } else {
            return _a2;
        }
    }

    @Override
    public void setA2(String a2) {
        _a2 = a2;
    }

    @JSON
    @Override
    public String getA3() {
        if (_a3 == null) {
            return StringPool.BLANK;
        } else {
            return _a3;
        }
    }

    @Override
    public void setA3(String a3) {
        _a3 = a3;
    }

    @JSON
    @Override
    public String getNumber_() {
        if (_number_ == null) {
            return StringPool.BLANK;
        } else {
            return _number_;
        }
    }

    @Override
    public void setNumber_(String number_) {
        _number_ = number_;
    }

    @JSON
    @Override
    public String getIdd_() {
        if (_idd_ == null) {
            return StringPool.BLANK;
        } else {
            return _idd_;
        }
    }

    @Override
    public void setIdd_(String idd_) {
        _idd_ = idd_;
    }

    @JSON
    @Override
    public int getZipRequired() {
        return _zipRequired;
    }

    @Override
    public void setZipRequired(int zipRequired) {
        _zipRequired = zipRequired;
    }

    @JSON
    @Override
    public int getActive_() {
        return _active_;
    }

    @Override
    public void setActive_(int active_) {
        _active_ = active_;
    }

    @Override
    public MyCustomCountry toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (MyCustomCountry) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MyCustomCountryImpl myCustomCountryImpl = new MyCustomCountryImpl();

        myCustomCountryImpl.setCountryId(getCountryId());
        myCustomCountryImpl.setName(getName());
        myCustomCountryImpl.setA2(getA2());
        myCustomCountryImpl.setA3(getA3());
        myCustomCountryImpl.setNumber_(getNumber_());
        myCustomCountryImpl.setIdd_(getIdd_());
        myCustomCountryImpl.setZipRequired(getZipRequired());
        myCustomCountryImpl.setActive_(getActive_());

        myCustomCountryImpl.resetOriginalValues();

        return myCustomCountryImpl;
    }

    @Override
    public int compareTo(MyCustomCountry myCustomCountry) {
        String primaryKey = myCustomCountry.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof MyCustomCountry)) {
            return false;
        }

        MyCustomCountry myCustomCountry = (MyCustomCountry) obj;

        String primaryKey = myCustomCountry.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<MyCustomCountry> toCacheModel() {
        MyCustomCountryCacheModel myCustomCountryCacheModel = new MyCustomCountryCacheModel();

        myCustomCountryCacheModel.countryId = getCountryId();

        String countryId = myCustomCountryCacheModel.countryId;

        if ((countryId != null) && (countryId.length() == 0)) {
            myCustomCountryCacheModel.countryId = null;
        }

        myCustomCountryCacheModel.name = getName();

        String name = myCustomCountryCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            myCustomCountryCacheModel.name = null;
        }

        myCustomCountryCacheModel.a2 = getA2();

        String a2 = myCustomCountryCacheModel.a2;

        if ((a2 != null) && (a2.length() == 0)) {
            myCustomCountryCacheModel.a2 = null;
        }

        myCustomCountryCacheModel.a3 = getA3();

        String a3 = myCustomCountryCacheModel.a3;

        if ((a3 != null) && (a3.length() == 0)) {
            myCustomCountryCacheModel.a3 = null;
        }

        myCustomCountryCacheModel.number_ = getNumber_();

        String number_ = myCustomCountryCacheModel.number_;

        if ((number_ != null) && (number_.length() == 0)) {
            myCustomCountryCacheModel.number_ = null;
        }

        myCustomCountryCacheModel.idd_ = getIdd_();

        String idd_ = myCustomCountryCacheModel.idd_;

        if ((idd_ != null) && (idd_.length() == 0)) {
            myCustomCountryCacheModel.idd_ = null;
        }

        myCustomCountryCacheModel.zipRequired = getZipRequired();

        myCustomCountryCacheModel.active_ = getActive_();

        return myCustomCountryCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{countryId=");
        sb.append(getCountryId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", a2=");
        sb.append(getA2());
        sb.append(", a3=");
        sb.append(getA3());
        sb.append(", number_=");
        sb.append(getNumber_());
        sb.append(", idd_=");
        sb.append(getIdd_());
        sb.append(", zipRequired=");
        sb.append(getZipRequired());
        sb.append(", active_=");
        sb.append(getActive_());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.liferay.krrishna.sb.remote.model.MyCustomCountry");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>countryId</column-name><column-value><![CDATA[");
        sb.append(getCountryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>a2</column-name><column-value><![CDATA[");
        sb.append(getA2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>a3</column-name><column-value><![CDATA[");
        sb.append(getA3());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>number_</column-name><column-value><![CDATA[");
        sb.append(getNumber_());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idd_</column-name><column-value><![CDATA[");
        sb.append(getIdd_());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>zipRequired</column-name><column-value><![CDATA[");
        sb.append(getZipRequired());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>active_</column-name><column-value><![CDATA[");
        sb.append(getActive_());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
